alias opendev='open http://ec2-54-202-48-93.us-west-2.compute.amazonaws.com:8000/'

export JENKINS_URL=http://jenkins.interos.io

export PATH=${PATH}:/Library/PostgreSQL/11/bin


source /usr/local/bin/virtualenvwrapper.sh

alias gitst="git st"

# syntax highlighting in the terminal
# pip install pygments
alias pcat="pygmentize -f terminal256 -O style=native -g"

export FZF_TMUX=1
export FZF_CTRL_T_OPTS="--preview 'bat_or_exa.sh {}'"
export FZF_DEFAULT_OPTS="--no-height --layout=reverse-list --cycle --bind=ctrl-k:kill-line"
export FZF_ALT_C_OPTS="--preview 'bat_or_exa.sh {}'"

alias fzbrew='brew list --formula | fzf -m --preview="brew info {}" | xargs brew install'

# fzopen() {
#   fd -t f -H -I | fzf -m --preview="xdg-mime query  {}" | xargs -ro -d "\n" xdg-open 2>&-
# }

. /usr/local/etc/profile.d/z.sh

/bin/cp -f ~/dotfiles/hosts/Rhadamanthus/bat_or_exa.sh ~/.local/bin

fzreveal() {
  fd -t f -H -I | fzf --preview 'bat_or_exa.sh --color=always {}' | xargs open --reveal
}

fzmime() {
  fzf --preview 'file -b --mime-type {}' | xargs file -b --mime-type
}

j() {
    cd "$(z -1 2>&1 | awk '{print $2}' | sort -u | fzf --inline-info --height 33%)"
}

jc() {
    cd "$(z -c -1 2>&1 | awk '{print $2}' | sort -u | fzf --inline-info --height 33%)"
}

fzgitdiff() {
    git status -s | awk '{print $2}' | fzf --preview 'git diff --color=always HEAD -- {}'
}

fl() {
  url=$1
  query=$2

  if [ -z "$url" ]; then
     echo "ERROR: No URL provided."
     return
  fi

  if [ -z "$query" ]; then
     echo "ERROR: No QUERY provided."
     return
  fi

  echo "Browsing url: $url"
  echo "   via query: $query"
  curl -s $url \
    | htmlq $query --attribute href            \
    | fzf -m --preview 'lynx -nolist -dump {}' \
    | xargs open
}

fst() {
  # echo "fst initializing ..."
  sqlite=sqlite3
  # echo sqlite is $sqlite
  db=$(fd '\.sqlite$' | fzf --preview "echo .schema | $sqlite {}")
  # echo DB is $db
  table=$(echo ".tables" | $sqlite $db | xargs -n1 echo | fzf --preview "echo '.schema {}' | $sqlite $db")
  # echo TABLE is $table
  fzql $db "SELECT * FROM $table"
}

toLower() {
  tr '[A-Z]' '[a-z]'
}

toUpper() {
  tr '[a-z]' '[A-Z]'
}

identityPipe() {
  cat -
}

exactly() {
  n=$1
  if [ -z "$n" ]; then
    echo "ERROR: exactly(): empty n"
    (cat -)
  else
    awk "length==${n}"
  fi
}

fzwords() {
  filter=identityPipe
  transmogrify=identityPipe

  for arg in $*; do
    case "$arg" in
      lower)    transmogrify=toLower      ;;
      upper)    transmogrify=toUpper      ;;
      identity) transmogrify=identityPipe ;;
      *)        head=$(echo "$arg" | cut -c1)
                tail=$(echo "$arg" | cut -c2-)
                # echo "head is ${head}"
                case "$head" in
                  "+") filter=(sed -r "/^.{0,${tail}}$/d")      ;;
                  "-") filter=(sed -r "/^.{${tail},100000}$/d") ;;
                  "=") filter=(exactly "${tail}")               ;;
                  *)   echo "WARNING: fzwords ignoring unknown argument: ${arg}"
                esac
    esac
  done

  # echo "transmogrify: ${transmogrify}"
  # echo "filter: ${filter}"

  cat /usr/share/dict/words \
      | ${transmogrify}      \
      | ${filter}             \
      | fzf -m
}
