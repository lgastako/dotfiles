# Automatically report run time of all commands
REPORTTIME=1

# Path to your oh-my-zsh configuration.
ZSH=$HOME/.oh-my-zsh

# Set name of the theme to load.
ZSH_THEME=kphoen

# Set to this to use case-sensitive completion
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
# DISABLE_AUTO_UPDATE="true"

# Uncomment following line if you want to disable colors in ls
# DISABLE_LS_COLORS="true"

# Uncomment following line if you want to disable autosetting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
# COMPLETION_WAITING_DOTS="true"

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git textmate virtualenvwrapper)

source $ZSH/oh-my-zsh.sh

# Customize to your needs...
source $HOME/dotfiles/bash/bash_aliases

export PATH=$HOME/local/bin:$HOME/.cabal/bin:/opt/local/bin:/usr/local/sbin:$PATH
export PATH=$PATH:/usr/local/share/npm/bin

# Put any path additions before this.

# We load oh-my-zsh after the path modifications so it can find other things,
# e.g. virtualenvwrappersource $ZSH/oh-my-zsh.sh
source $ZSH/oh-my-zsh.sh

VIRTUALENV_WRAPPER_LOCATIONS=(
    /usr/local/bin/python
    /usr/local/share/python
    /usr/bin
)
for d in $VIRTUALENV_WRAPPER_LOCATIONS
do
    wrapper=$d/virtualenvwrapper.sh
    if [ -e $wrapper ]; then
        . $wrapper
    fi
done

export VIRTUALENVWRAPPER_PYTHON=/usr/bin/python

unsetopt correctall

function protopy { git clone git@github.com:lgastako/protopy.git $1 && cd $1 && . ./begin.sh $1 }

setopt autocd

alias t=py.test
# pysrc() { cd "~WORKON_HOME/$1/lib/python*/site-packages" }
px() { cd ~VIRTUAL_ENV/lib/python*/site-packages }
mx() { mate ~VIRTUAL_ENV/lib/python*/site-packages }

alias m=make

export PYTHONSTARTUP=$HOME/dotfiles/python/pythonstartup.py

export RBENV_ROOT=/usr/local/opt/rbenv

export PYTHONPATH=.


### Added by the Heroku Toolbelt
export PATH="/usr/local/heroku/bin:$PATH"


# I like being able to use comments on the interactive command line.
setopt INTERACTIVECOMMENTS


PATH=$PATH:$HOME/.rvm/bin # Add RVM to PATH for scripting

PATH="/Applications/Postgres.app/Contents/MacOS/bin:$PATH"

LD_LIBRARY_PATH="/Applications/Postgres.app/Contents/MacOS/lib:$LD_LIBRARY_PATH"

#if [ `whoami` = "vagrant" ]; then
#    . /var/venv/sm/bin/activate
#fi

# Need /usr/local/bin to be first to get correct psql version on maia for atomic
export PATH=/usr/local/bin:$PATH

# Except we need this to have the right lein first.
export PATH=$HOME/dotfiles/bin:$PATH

export GOPATH=$HOME/go
export PATH=$GOPATH/bin:$PATH

export PATH=$PATH:$HOME/go_appengine

export PATH="$PATH:/Applications/Racket v6.0/bin"

if [ -e /usr/local/share/zsh/site-functions ]; then
    . /usr/local/share/zsh/site-functions
fi

alias rethinkdb.start='launchctl load /usr/local/opt/rethinkdb/homebrew.mxcl.rethinkdb.plist'
alias rethinkdb.stop='launchctl unload /usr/local/opt/rethinkdb/homebrew.mxcl.rethinkdb.plist'

export PATH="$PATH:/Applications/Julia-0.2.1.app/Contents/Resources/julia/bin"
export PATH="$PATH:/Users/john/go_appengine"

export ARCHFLAGS=-Wno-error=unused-command-line-argument-hard-error-in-future

alias l=lein
alias vs='vagrant ssh'

export PATH="$PATH:/Users/john/src/CMU-Cam_Toolkit_v2/bin"

export PATH="/Users/john/dotfiles/packer/osx-amd64:$PATH"

### Environment specific extensions

UNAME=`uname -s`
unames_zshrc=$HOME/dotfiles/unames/$UNAME/zshrc
if [ -e $unames_zshrc ]; then
    echo "Loading environment specific zsh extensions (environment $UNAME)."
    . $unames_zshrc
fi

### Host specific extensions

DOT_HOST=`echo $HOST | cut -f1 -d.`
host_zshrc=$HOME/dotfiles/hosts/$DOT_HOST/zshrc
if [ -e $host_zshrc ]; then
    echo "Loading host specific zsh extensions (host $DOT_HOST)."
    . $host_zshrc
fi

### Sensitive values like keys and things that should NOT be commited to git

sensitive_zshrc=$HOME/dotfiles/sensitive/zshrc
if [ -e $sensitive_zshrc ]; then
    echo "Loading sensitive environment variables."
    . $sensitive_zshrc
fi

alias emacsclient='/Applications/Emacs.app/Contents/MacOS/bin/emacsclient -n'
alias e=emacsclient

if [ -e /usr/local/share/zsh/site-functions/_aws ]; then
   source /usr/local/share/zsh/site-functions/_aws
fi
PERL_MB_OPT="--install_base \"/Users/john/perl5\""; export PERL_MB_OPT;
PERL_MM_OPT="INSTALL_BASE=/Users/john/perl5"; export PERL_MM_OPT;


export PATH=${PATH}:/Users/john/.gem/ruby/2.0.0/bin

export DESK_DIR=${HOME}/dotfiles/desks

if [ -e /Users/john/.nix-profile/etc/profile.d/nix.sh ]; then
   . /Users/john/.nix-profile/etc/profile.d/nix.sh
fi

alias wifi='networksetup -setairportpower en0'


export NVM_DIR="/Users/john/.nvm"
[ -s "$NVM_DIR/nvm.sh" ] && . "$NVM_DIR/nvm.sh"  # This loads nvm


# # place this after nvm initialization!
# autoload -U add-zsh-hook
# load-nvmrc() {
#   local node_version="$(nvm version)"
#   local nvmrc_path="$(nvm_find_nvmrc)"

#   if [ -n "$nvmrc_path" ]; then
#     local nvmrc_node_version=$(nvm version "$(cat "${nvmrc_path}")")

#     if [ "$nvmrc_node_version" != "N/A" ] && [ "$nvmrc_node_version" != "$node_version" ]; then
#       nvm use
#     fi
#   elif [ "$node_version" != "$(nvm version default)" ]; then
#     echo "Reverting to nvm default version"
#     nvm use default
#   fi
# }
# add-zsh-hook chpwd load-nvmrc
# load-nvmrc


alias k=kubectl
alias ku=kubectl
alias kube=kubectl

# The next line updates PATH for the Google Cloud SDK.
if [ -f '/Users/john/google-cloud-sdk/path.zsh.inc' ]; then source '/Users/john/google-cloud-sdk/path.zsh.inc'; fi

# The next line enables shell command completion for gcloud.
if [ -f '/Users/john/google-cloud-sdk/completion.zsh.inc' ]; then source '/Users/john/google-cloud-sdk/completion.zsh.inc'; fi

export PATH=/Users/john/.local/bin:$PATH


copr() {
    git fetch origin refs/pull/$1/head:pull-request-$1
    git co pull-request-$1
}